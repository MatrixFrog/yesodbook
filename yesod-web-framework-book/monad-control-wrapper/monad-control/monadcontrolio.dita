<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="monadcontrolio"><title>MonadControlIO</title><conbody>
  <p id="x1">The MonadTrans class provides the lift method, which allows you to lift an action one level in
   the stack. There is also the MonadIO class that provides liftIO, which lifts an IO action as far
   in the stack as desired. We have the same breakdown in monad-control. But first, we need a
   corrolary to
   Run:<codeblock id="x2" outputclass="haskell">type RunInBase m base = forall b. m b -&gt; base (m b)</codeblock>Instead
   of dealing with a transformer, we're dealing with two monads. base is the underlying monad, and m
   is a stack built on top of it. RunInBase is a function that takes a value of the entire stack,
   pops out that base, and puts in on the outside. Unlike in the Run type, we don't replace it with
   an arbitrary monad, but with the original one. To use some more concrete types:</p>
  <codeblock id="x3" outputclass="haskell">RunInBase (ErrorT MyError IO) IO = forall b. ErrorT MyError IO b -&gt; IO (ErrorT MyError IO b)</codeblock>
  <p id="x4">This should look fairly similar to what we've been looking at so far, the only difference is
   that we want to deal with a specific inner monad. Our MonadControlIO class is really just an
   extension of MonadControlTrans using this RunInBase.</p>
  <codeblock id="x5" outputclass="haskell">class MonadIO m =&gt; MonadControlIO m where
    liftControlIO :: (RunInBase m IO -&gt; IO a) -&gt; m a</codeblock>
  <p id="x6">Simply put, liftControlIO takes a function which receives a RunInBase. That RunInBase can be
   used to strip down our monad to just an IO, and then liftControlIO builds everything back up
   again. And like MonadControlTrans, it comes with a helper function</p>
  <codeblock id="x7" outputclass="haskell">controlIO :: MonadControlIO m =&gt; (RunInBase m IO -&gt; IO (m a)) -&gt; m a
controlIO = join . liftControlIO</codeblock>
  <p id="x8">We can easily rewrite our previous example with
   it:<codeblock id="x9" outputclass="haskell">useMyFileError7 :: ErrorT MyError IO ()
useMyFileError7 = controlIO $ \run -&gt; withMyFile $ run . sayHiError</codeblock>And
   as an advantage, it easily scales to multiple
   transformers:<codeblock id="x10" outputclass="haskell">sayHiCrazy :: Handle -&gt; ReaderT Int (StateT Double (ErrorT MyError IO)) ()
sayHiCrazy handle = liftIO $ hPutStrLn handle "Madness!"

useMyFileCrazy :: ReaderT Int (StateT Double (ErrorT MyError IO)) ()
useMyFileCrazy = controlIO $ \run -&gt; withMyFile $ run . sayHiCrazy</codeblock></p>
 </conbody></concept>