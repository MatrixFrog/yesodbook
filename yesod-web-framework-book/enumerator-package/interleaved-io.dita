<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="interleaved-io"><title>Interleaved I/O</title><conbody><p id="io1">Alright, let's look at a totally different problem. We want to be fed some strings and print them to the screen one line at a time. One approach would be to use lazy I/O:</p><codeblock outputclass="haskell" id="x1">lazyIO :: IO ()
lazyIO = do
    s &lt;- lines `fmap` getContents
    mapM_ putStrLn s</codeblock><p id="io2">But this has two drawbacks: </p><ul id="x2"><li id="x3">It's tied down to a single input source, stdin. This could be worked around with an argument giving a datasource.</li><li id="x4">But let's say the data source is some scarce resource (think: file handles on a very busy web server). We have no guarantees with lazy I/O of when those file handles will be released.</li></ul><p id="io3">Let's look at how to write this in our new high-level monadic iteratee approach:</p><codeblock outputclass="haskell" id="x5">interleaved :: MonadIO m =&gt; Iteratee String m ()
interleaved = do
    maybeLine &lt;- head
    case maybeLine of
        Nothing -&gt; return ()
        Just line -&gt; do
            liftIO $ putStrLn line
            interleaved</codeblock><p id="io4">The liftIO function comes from the transformers package, and simply promotes an action in the IO monad to any arbitrary MonadIO action. Notice how we don't really track any state with this iteratee: we don't care about its result, only its side effects.</p></conbody></concept>