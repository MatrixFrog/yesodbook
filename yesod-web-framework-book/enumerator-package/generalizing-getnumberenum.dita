<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="generalizing-getnumberenum"><title>Generalizing getNumberEnum</title><conbody><p id="gen1">Earlier, we created a getNumberEnum function with a type signature:</p><codeblock outputclass="haskell" id="x1">getNumberEnum :: MonadIO m =&gt; Enumerator Int m b</codeblock><p id="gen2">If you don't remember, this means getNumberEnum produces a stream of <codeph id="x2">Int</codeph>s. In particular, our getNumberEnum function read lines from stdin, converted them to ints and fed them into an iteratee. It stopped reading lines when it saw a "q".</p><p id="gen3">But this functionality seems like it could be useful outside the realm of Ints. We may like to deal with the original Strings, for example, or Bools, or a bunch of other things. We could easily define a more generalized function which simply doesn't do the String to Int conversion:</p><codeblock outputclass="haskell" id="x3">lineEnum :: MonadIO m =&gt; Enumerator String m b
lineEnum (Continue k) = do
    x &lt;- liftIO getLine
    if x == "q"
        then continue k
        else k (Chunks [x]) &gt;&gt;== lineEnum
lineEnum step = returnI step</codeblock><p id="gen4">Cool, let's plug this into our sumIter function (I've renamed the sum6 function from the previous two parts):</p><codeblock outputclass="haskell" id="x4">lineEnum $$ sumIter</codeblock><p id="gen5">Actually, that doesn't type check: lineEnum produces <codeph id="x5">String</codeph>s, and sumIter takes <codeph id="x6">Int</codeph>s. We need to modify one of them somehow.</p><codeblock outputclass="haskell" id="x7">sumIterString :: Monad m =&gt; Iteratee String m Int
sumIterString = Iteratee $ do
    innerStep &lt;- runIteratee sumIter
    return $ go innerStep
  where
    go :: Monad m =&gt; Step Int m Int -&gt; Step String m Int
    go (Yield res _) = Yield res EOF
    go (Error err) = Error err
    go (Continue k) = Continue $ \strings -&gt; Iteratee $ do
        let ints = fmap read strings :: Stream Int
        step &lt;- runIteratee $ k ints
        return $ go step</codeblock><p id="gen6">What we've done here is wrap around the original iteratee. As usual, we first need to unwrap the Iteratee constructor and the monad to get at the heart of the Step value. Once we have that innerStep value, we pass it to the go function, which simply transforms that values in the Stream value from Strings to Ints.</p></conbody></concept>