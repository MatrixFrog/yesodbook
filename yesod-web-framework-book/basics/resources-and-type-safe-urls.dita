<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="resources-and-type-safe-urls"><title>Resources and type-safe URLs</title><conbody><p id="resources1">In our hello world, we defined just a single resource (HomeR). A web application is usually much more exciting with more than one page on it. Let's take a look:</p><codeblock id="x1" outputclass="haskell">-- START
{-# LANGUAGE TypeFamilies, QuasiQuotes, MultiParamTypeClasses, TemplateHaskell, OverloadedStrings #-}
import Yesod

data Links = Links

mkYesod "Links" [parseRoutes|
/ HomeR GET
/page1 Page1R GET
/page2 Page2R GET
|]

instance Yesod Links where
    approot _ = ""

getHomeR  = defaultLayout [whamlet|&lt;a href="@{Page1R}"&gt;Go to page 1!|]
getPage1R = defaultLayout [whamlet|&lt;a href="@{Page2R}"&gt;Go to page 2!|]
getPage2R = defaultLayout [whamlet|&lt;a href="@{HomeR}"&gt;Go home!|]

main = warpDebug 3000 Links
-- STOP
</codeblock><p id="resources2">Overall, this is the same. Our foundation is now Links instead of HelloWorld, and in addition to the HomeR resource, we've added Page1R and Page2R. As such, we've also added two more handler functions: getPage1R and getPage2R.</p><p id="resources3">The only truly new feature is inside the hamlet quasi-quotation on lines 15-17. We'll delve into syntax later, but we can see that:</p><codeblock outputclass="hamlet" id="x2">&lt;a href="@{Page1R}"&gt;Go to page 1!</codeblock><p id="resources4">creates a link to the Page1R resource. The important thing to note here is that Page1R is a data constructor. By making each resource a data constructor, we have a feature called <term id="x3">type-safe URLs</term>. Instead of splicing together strings to create URLs, we simply create a plain old Haskell value. By using at-sign interpolation (@{...}), Yesod automatically renders those values to textual URLs before sending things off to the user.</p></conbody></concept>