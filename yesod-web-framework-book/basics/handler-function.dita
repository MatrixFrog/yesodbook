<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="handler-function"><title>Handler function</title><conbody><p id="handler1">Most of the code you write in Yesod lives in handler functions. This is where you process user input, perform database queries and create responses. In our simple example, we create a response using the defaultLayout function. By default, this is simply an HTML wrapper that creates a doctype, html, head and body tags. <xref id="x1" href="../../yesod-web-framework-book/yesod-typeclass/yesod-typeclass.dita">As we'll see later</xref>, this function can be overridden to do much more.</p><p id="handler2">That funny <codeph id="x2">[whamlet|Hello World!|]</codeph> is a <term id="x3">quasi-quotation</term>. It allows us to embed arbitrary text in our Haskell code, process it with a specific function and have that generate Haskell code, all at compile time. In our case, we feed the string "Hello World!" to the hamlet quasi-quoter.</p><note id="x4" type="other" othertype="advanced"><p id="handler2a">While quasi quotation is great for small code snippets, and wonderful for making single-file examples, it does not scale well to production levels, since it mixes logic and presentation in the same file. When we <xref id="x5" href="book/yw://topic/111">discuss templates</xref>, you will see how to put your templates in external files.</p></note><p id="handler3">Hamlet is the default HTML templating engine in Yesod. Together with its siblings Cassius and Julius, you can create HTML, CSS and Javascript in a fully type-safe and compile-time-checked manner. We'll see much more about this <xref id="x6" href="book/yw://topic/130">when we discuss widgets</xref>.</p></conbody></concept>