<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Case Study: Sphinx-based Search</title>
 <conbody>
  <p><xref href="http://sphinxsearch.com/" format="html" scope="external">Sphinx</xref> is a search
   server, and powers the search feature on many sites, including Yesod's own site. While the actual
   code necessary to integrate Yesod with Sphinx is relatively short, it touches on a number of
   complicated topics, and is therefore a great case study in how to play with some of the
   under-the-surface details of Yesod.</p>
  <p>There are essentially three different pieces at play here:</p>
  <ul id="ul_bqg_pbh_rd">
   <li>Storing the content we wish to search. This is fairly straight-forward Persistent code, and
    we won't dwell on it much in this chapter.</li>
   <li>Accessing Sphinx search results from inside Yesod. Thanks to the <apiname>sphinx</apiname>
    package, this is actually very easy.</li>
   <li>Providing the document content to Sphinx. This is where the interesting stuff happens, and
    will show how to deal with streaming content from a database directly to XML, which gets sent
    directly over the wire to the client.</li>
  </ul>
 </conbody>
</concept>
