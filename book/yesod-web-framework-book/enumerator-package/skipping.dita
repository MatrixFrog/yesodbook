<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="skipping"><title id="x-1">Skipping</title><conbody id="x-2"><p id="skipping1">Let's write a slightly more interesting enumeratee: this one skips every other input value.</p><codeblock outputclass="haskell" id="x1">skip :: Monad m =&gt; Enumeratee a a m b
skip (Continue k) = do
    x &lt;- head
    _ &lt;- head -- the one we're skipping
    case x of
        Nothing -&gt; return $ Continue k
        Just y -&gt; do
            newStep &lt;- lift $ runIteratee $ k $ Chunks [y]
            skip newStep
skip step = return step</codeblock><p id="skipping2">What's interesting about the approach here is how similar it looks to an Enumerator. We're doing a lot of the same things: checking if the Step value is a Continue; if it's not, then simply return it. Then we capitalize on the Iteratee Monad instance, using the head function to pop two values out of the stream. If there's no more data, we return the original Continue value: just like with an Enumerator, we don't give an EOF so that we can feed more data into the iteratee later. If there is data, we pass it off to the iteratee, get our new step value and then loop.</p><p id="skipping3">And what's cool about enumeratees is we can chain these all together:</p><codeblock outputclass="haskell" id="x2">run_ (lineEnum $$ joinI $ skip $$ joinI $ map read $$ sumIter) &gt;&gt;= print</codeblock><p id="skipping4">Here, we read lines, skip every other input, convert the Strings to Ints and sum them.</p></conbody></concept>