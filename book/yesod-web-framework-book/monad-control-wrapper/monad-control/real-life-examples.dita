<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="real-life-examples"><title id="x-1">Real Life Examples</title><conbody id="x-2">
  <p id="x1">Let's solve some real-life problems with this code. Probably the biggest motivating use case is
   exception handling in a transformer stack. For example, let's say that we want to automatically
   run some cleanup code when an exception is thrown. If this were normal IO code, we'd
   use:<codeblock id="x2" outputclass="haskell">onException :: IO a -&gt; IO b -&gt; IO a</codeblock>But if we're
   in the ErrorT monad, we can't pass in either the action or the cleanup. In comes controlIO to the
   rescue:<codeblock id="x3" outputclass="haskell">onExceptionError :: ErrorT MyError IO a
                 -&gt; ErrorT MyError IO b
                 -&gt; ErrorT MyError IO a
onExceptionError action after = controlIO $ \run -&gt;
    run action `onException` run after</codeblock></p>
  <p id="x4">Let's say we need to allocate some memory to store a Double in. In the IO monad, we could just
   use the alloca function. Once again, our solution is
   simple:<codeblock id="x5" outputclass="haskell">allocaError :: (Ptr Double -&gt; ErrorT MyError IO b)
            -&gt; ErrorT MyError IO b
allocaError f = controlIO $ \run -&gt; alloca $ run . f</codeblock></p>
 </conbody></concept>