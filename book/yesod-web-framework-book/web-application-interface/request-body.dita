<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="request-body"><title id="x-1">Request Body</title><conbody id="x-2"><p id="reqbod1">In order to avoid the need to load the entire request body into memory, we use enumerators here as well. Since the purpose of these values are for reading (not writing), we use <codeph id="x1">ByteString</codeph>s in place of <codeph id="x2">Builder</codeph>s. This is all contained in the type signature of an <codeph id="x3">Application</codeph>:</p><codeblock outputclass="haskell" id="x4">type Application = Request -&gt; Iteratee ByteString IO Response</codeblock><p id="reqbod2">This states that an application is a function, which takes a <codeph id="x5">Request</codeph> value and returns an action. This action consumes a stream of <codeph id="x6">ByteString</codeph>s (the request body) and produces a <codeph id="x7">Response</codeph>.</p><p id="reqbod3">The request body could in theory contain any type of data, but the most common are URL encoded and multipart form data. The <apiname id="x8">wai-extra</apiname> package contains built-in support for parsing these in a memory-efficient manner.</p></conbody></concept>