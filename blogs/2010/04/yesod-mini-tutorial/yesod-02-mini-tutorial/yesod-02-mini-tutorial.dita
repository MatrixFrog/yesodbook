<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="yesod-02-mini-tutorial"><title>Yesod 0.2 Mini Tutorial</title><body><foreign outputclass="html">&lt;p&gt;Well, I'll be flying home in a few days after a long trip to see family. As such, this will probably be my last time to do some Yesod work for a week, so I wanted to give a little status update.&lt;/p&gt;
&lt;p&gt;There are two major changes coming with Yesod 0.2: Hamlet and web-routes-quasi. The former is going to be the preferred templating system for Yesod, replacing both HStringTemplate and the Data.Object.Html module. It has already been released and is &lt;a href="http://docs.yesodweb.com/hamlet/"&gt;fairly well documented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The latter is a reworking of the former routing system for Yesod, split out and designed to work with web-routes. It features a simpler syntax, support for subsites, and (most importantly) delivers the ability to create type-safe URLs. It is not yet released, though there is &lt;a href="http://docs.yesodweb.com/web-routes-quasi/"&gt;a web-routes-quasi documentation page&lt;/a&gt;; that page may be a little out of date.&lt;/p&gt;
&lt;p&gt;I'm very interested in hearing community feedback on Yesod at this point. I know most people will wait to try things out seriously when &lt;a href="http://docs.yesodweb.com/"&gt;the documentation is written&lt;/a&gt;, but for now I thought I'd write a mini-tutorial on how things fit together.&lt;/p&gt;
&lt;h3&gt;Hello World&lt;/h3&gt;
&lt;code&gt;&lt;pre&gt;1 {-# LANGUAGE TypeFamilies, QuasiQuotes, TemplateHaskell #-}
2 import Yesod
3 data HelloWorld = HelloWorld
4 mkYesod "HelloWorld" [$parseRoutes|/ Home GET|]
5 instance Yesod HelloWorld where approot _ = ""
6 getHome = return $ RepPlain $ cs "Hello World!"
7 main = toWaiApp HelloWorld &amp;gt;&amp;gt;= basicHandler 3000&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;Line 1 shows you what language extensions Yesod requires, and line 2 imports the framework. Line 3 declares the HelloWorld datatype; every Yesod application has such a datatype which is the core of the application. In our simple HelloWorld, we don't need any information in it, but usually you store settings loaded from config files, database connections and the like in it.&lt;/p&gt;
&lt;p&gt;Line 4 is magic: the end of the line is a piece of quasiquotes which creates a list of Resources. This is a feature provided by web-routes-quasi; see its documentation for syntax information. mkYesod is template haskell that does a number of things for us:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creates a datatype for the URLs in our application. For our example, this is equivalent to &lt;code&gt;data HelloWorldRoutes = Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creates an instance of YesodSite; this provided URL parse and render functions as well as a dispatch function. The dispatch function references the getHome function, which is why we define it on line 6.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Line 5 is a minimalistic instance of the Yesod typeclass; all applications must instantiate it. You can set various settings in it, but the only one necessary is approot. Line 6 defines the handler for the GET method of the application root. &lt;a href="http://hackage.haskell.org/packages/archive/convertible-text/0.2.0.5/doc/html/Data-Convertible-Base.html#v%3Acs"&gt;cs&lt;/a&gt; converts the string "Hello World!" into Content; RepPlain specifies that the content type is "text/plain".&lt;/p&gt;
&lt;p&gt;And finally, line 7 creates a WAI &lt;a href="http://hackage.haskell.org/packages/archive/wai/0.0.0/doc/html/Network-Wai.html#t%3AApplication"&gt;Application&lt;/a&gt; and uses the basicHandler to serve the application via either simple server or CGI, based on environment variables.&lt;/p&gt;
&lt;h3&gt;Beyond Hello World&lt;/h3&gt;
&lt;p&gt;I'll just point out a few of the possibly surprising things in Yesod; everything will be covered more thoroughly in the upcoming documentation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can provide multiple representations of a response, and allow Yesod to choose the right one based on the HTTP "Accept" request header. This allows you to easily create applications with either an AJAX or static interface.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://hackage.haskell.org/package/clientsession"&gt;clientsession&lt;/a&gt; is used for handling session data.&lt;/li&gt;
&lt;li&gt;There is built in support for OpenID and RPXnow authentication, but not internal site authentication. Hopefully, that will be added soon.&lt;/li&gt;
&lt;li&gt;The &lt;a href="http://github.com/snoyberg/yesod/tree/ver0.2"&gt;current development version&lt;/a&gt; depends on a few packages not yet released, but which are all available in &lt;a href="http://github.com/snoyberg"&gt;my github account&lt;/a&gt;. Obviously those will all be uploaded before release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I might update this post with a few more points later, but I'm out of time for now! See you all in a week.&lt;/p&gt;
&lt;h3 style="color:#f00"&gt;Update (April 25, 2010)&lt;/h3&gt;
&lt;p&gt;I've gotten all of the dependencies for Yesod uploaded onto Hackage, so all it should take to try it out is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cabal update&lt;/li&gt;
&lt;li&gt;git clone git://github.com/snoyberg/yesod.git&lt;/li&gt;
&lt;li&gt;cd yesod&lt;/li&gt;
&lt;li&gt;git checkout origin/ver0.2&lt;/li&gt;
&lt;li&gt;cabal install&lt;/li&gt;
&lt;/ul&gt;
</foreign></body></topic>