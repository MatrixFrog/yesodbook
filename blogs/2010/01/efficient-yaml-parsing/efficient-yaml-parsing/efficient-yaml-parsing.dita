<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="efficient-yaml-parsing"><title>Efficient YAML Parsing</title><body><foreign outputclass="html">&lt;p&gt;One of the main applications I have for stress testing &lt;a href="http://github.com/snoyberg/yesod"&gt;my Yesod web framework&lt;/a&gt; is &lt;a href="http://www.snoyman.com/photos/"&gt;the photo blog&lt;/a&gt;. This blog stores all information in a single YAML file. This file is now about 200 KB large.&lt;/p&gt;
&lt;p&gt;A few weeks ago, I made some changes so Atom feeds would be generated using &lt;a href="http://github.com/snoyberg/yesod/blob/master/Data/Object/Html.hs"&gt;HtmlObject&lt;/a&gt;, and suddenly I was running out of memory. At the time I made a few simple strictness hacks and set it aside for later.&lt;/p&gt;
&lt;p&gt;Now that the release is nearing, I've started attacking memory leaks. The HtmlObject bug was fairly easily solved (it was using too much list appending), but I realized I was unhappy with the performance of my &lt;a href="http://hackage.haskell.org/package/data-object-yaml"&gt;YAML library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just as a quick intro, this YAML library includes a binding to &lt;a href="http://pyyaml.org/wiki/LibYAML"&gt;libyaml&lt;/a&gt; and converts the result to be a &lt;a href="http://hackage.haskell.org/package/data-object"&gt;Data.Object.Object&lt;/a&gt;. The problem with this approach is that, anytime you read the file, it reads &lt;b&gt;and stores&lt;/b&gt; the entire contents in memory, even if you only need to collect, say, the names of the entries.&lt;/p&gt;
&lt;h2&gt;A simple solution&lt;/h2&gt;
&lt;p&gt;A fairly simple solution to this problem is to run a program to split the single large YAML files into different views. For example, one file for each entry, and then a separate file with the list of all entries. This is most likely something I will want to do regardless, since it will reduce disk read times. Nonetheless, the library should be made more efficient.&lt;/p&gt;
&lt;h2&gt;The Benchmark&lt;/h2&gt;
&lt;p&gt;In order to test things out, I decided to go for a ridiculously simple benchmark: count how many entries are in my YAML file. You can &lt;a href="http://static.snoyman.com/entries.yaml"&gt;download the sample file here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main issue I'm interested in here is memory, not processing, so I will only mention those results. In particular, I consider the most important number total memory in use as reported by "+RTS -sstderr". If someone know a reason to trust another number instead, please let me know.&lt;/p&gt;
&lt;p&gt;The original version of the library ended up using 7MB of memory. Considering the fact that the entire YAML file is only 200KB, there's a lot of fat to trim.&lt;/p&gt;
&lt;p&gt;The main issue, however, is the fact that I'm reading the entire file into memory. Let's see how to address that.&lt;/p&gt;
&lt;h2&gt;Lazy IO&lt;/h2&gt;
&lt;p&gt;I at first considered using unsafeInterleaveIO to get out of this predicament. The library produced a list of events ([Event]). However, I had plenty of reasons to avoid this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I'm calling out to a C library, which made things very hairy. There were all kinds of resource management issues to beware of.&lt;/li&gt;
&lt;li&gt;Any step along the way could have generated a failure from the C library, and I didn't want those popping up in pure code. I could have changed the type to [Either YamlException Event], but it seemed like an uphill battle.&lt;/li&gt;
&lt;li&gt;I haven't seen examples of unsafeInterleaveIO used in this context, and I wasn't certain how stable it would be.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Left-fold enumerator&lt;/h2&gt;
&lt;p&gt;So I decided that it would make most sense to have a left-fold enumerator here. In this setup, I would provide the library with a function and accumulating parameter, and the library handles all memory management and exception issues. &lt;a href="http://okmij.org/ftp/Streams.html"&gt;Others&lt;/a&gt; &lt;a href="http://www.galois.com/blog/2008/09/12/left-fold-enumerators-a-safe-expressive-and-efficient-io-interface-for-haskell/"&gt;have&lt;/a&gt; &lt;a href="http://www.haskell.org/haskellwiki/Enumerator_and_iteratee"&gt;discussed&lt;/a&gt; this topic at-length, so I won't get into more details for now.&lt;/p&gt;
&lt;p&gt;In this process, I decided to split the library into two pieces: yaml would be the low-level binding providing the left-fold enumerator interface, while data-object-yaml would provide high-level conversions to data-object types.&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;The results so far are promising. I now have two benchmarks: the easy and efficient one. The easy benchmark follows the same procedure as before: convert the entire YAML file into an Object and then count the entries. After the rewrite, this benchmark takes 5 MB. Still needs lots of work, but I was gratified to see that I shaved off 2 MB without focusing on this area.&lt;/p&gt;
&lt;p&gt;However, the efficient benchmark is where we see the real possibilities of a left-fold enumerator approach. This code generates no intermediate data structure, it simply counts up the entries. Here's some number comparisons between the two benchmarks:&lt;/p&gt;
&lt;table border="1"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Results&lt;/th&gt;
&lt;th&gt;Easy&lt;/th&gt;
&lt;th&gt;Efficient&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Total memory used&lt;/th&gt;
&lt;td&gt;5-6MB&lt;/td&gt;
&lt;td&gt;1MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;%GC Time&lt;/th&gt;
&lt;td&gt;50.0%&lt;/td&gt;
&lt;td&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Maximum residency (bytes)&lt;/th&gt;
&lt;td&gt;3,545,840&lt;/td&gt;
&lt;td&gt;7,632&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;It appears to me that this version runs in constant space, which is what I would hope for.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The downside to the efficient method is that it's rather tedious to program. However, I think it should be relatively straight-forward to develop a parsing framework to ease this burden. After all, we're dealing with &lt;i&gt;incredibly&lt;/i&gt; simple data structures here: scalars, sequences and mappings.&lt;/p&gt;
&lt;p&gt;If you'd like to play around with this code yourself, you'll need to get both my &lt;a href="http://github.com/snoyberg/yaml"&gt;yaml&lt;/a&gt; and &lt;a href="http://github.com/snoyberg/data-object-yaml"&gt;data-object-yaml&lt;/a&gt; repositories from Github.&lt;/p&gt;
</foreign></body></topic>