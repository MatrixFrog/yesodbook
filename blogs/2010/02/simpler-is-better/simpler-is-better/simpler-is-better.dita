<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="simpler-is-better"><title>Simpler is Better</title><body><foreign outputclass="html">&lt;p&gt;I was in the middle of writing a post about non-recursive enumerators (see &lt;a href="http://www.snoyman.com/blog/entry/request-body-interfaces/"&gt;my last post&lt;/a&gt;) when I realized it was too much of an uphill battle. While they gave the promise of uniting both request and response bodies under a single interface that allowed easy generation of lazy bytestrings, they were going to be too complicated.&lt;/p&gt;
&lt;p&gt;So I've broken down and admitted that I will have to have two separate interfaces for these things. It makes sense after all: the requirements for a server spitting out a response body are quite different than an application reading a request body.&lt;/p&gt;
&lt;p&gt;So I think it's safe to declare the winner on the response body side to be the recursive enumerator (henceforth known as enumerator). In addition, to deal with a number of compile type issues, I've added a newtype, so that the definition of Enumerator is:&lt;/p&gt;
&lt;code&gt;&lt;pre&gt;newtype Enumerator = Enumerator { runEnumerator :: forall a.
              (a -&gt; B.ByteString -&gt; IO (Either a a))
                 -&gt; a
                 -&gt; IO (Either a a)
}&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;I know it looks scary, but it's not really that bad: first argument is an iteratee and the second is the initial seed. Don't worry, they &lt;a href="http://github.com/snoyberg/wai"&gt;wai repository&lt;/a&gt; has some good examples of how to use it in the Network.Wai.Enumerator module. You can also check out the &lt;a href="http://github.com/snoyberg/wai-extra"&gt;wai-extra&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Without rehashing the discussion from the last post, I mentioned what I called a "Source", but complained that it required the use of a MVar. I also alluded to an alternate definition that did away with the MVar, instead allowing explicit state passing. That's what's currently in the WAI. The definition is:&lt;/p&gt;
&lt;code&gt;data Source = forall a. Source a (a -&gt; IO (Maybe (B.ByteString, a)))&lt;/code&gt;
&lt;p&gt;The Source constructor has two pieces: the "a" and that ugly function. The "a" is the initial state of the Source. One example (used by both SimpleServer and CGI in wai-extra) for that "a" is the value of the Content-Length header.&lt;/p&gt;
&lt;p&gt;The second piece (the ugly function) takes some state, and then gives you the next piece of the request body and a new state, if they're available. Back to the previous example, if given a value of 0, it knows that the request body has been entirely consumed and returns Nothing. Otherwise, it takes another chunk off the request body, and returns that chunk with the remaining length.&lt;/p&gt;
&lt;p&gt;I think this is by far the simplest approach to program to. I was reluctant to introduce it since it involves two different interfaces, but at this point I see no better alternative. If anyone is actually interested in why I'm rejecting non-recursive enumerators, feel free to ask.&lt;/p&gt;
&lt;p&gt;At this point, I think the WAI is ready to be released. I'll wait a week for comments, and then put it on Hackage.&lt;/p&gt;
</foreign></body></topic>