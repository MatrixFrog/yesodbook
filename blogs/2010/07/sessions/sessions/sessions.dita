<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="sessions"><title>Sessions</title><body><foreign outputclass="html">&lt;p&gt;This post discusses the session API as present in Yesod 0.4. This version has not been released yet, but you can &lt;a href="http://docs.yesodweb.com/haddock/yesod/"&gt;see the Haddocks online&lt;/a&gt;. The API is not much different from previous versions, but the names have changed a bit.&lt;/p&gt;
&lt;h3&gt;Sessions&lt;/h3&gt;
&lt;p&gt;Most web frameworks provide some notion of user sessions, where you can store small bits of information for each user. In the case of Yesod, we use the &lt;a href="http://hackage.haskell.org/package/clientsession"&gt;clientsession package&lt;/a&gt; (also written by yours truly) to store data in an HTTP cookie. While this might sound insecure and inefficient at first, it's not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All data is hashed, encrypted and base64-encoded before being placed in the HTTP cookie.&lt;/li&gt;
&lt;li&gt;You shouldn't be storing large amounts of data in the cookie, so the bandwidth overhead shouldn't be large.&lt;/li&gt;
&lt;li&gt;Production sites should be serving their static data from a separate domain name, meaning the cookie bandwidth hit won't apply to them.&lt;/li&gt;
&lt;li&gt;By storing the data in a client session, we avoid a database lookup for each request, which can be very expensive.&lt;/li&gt;
&lt;li&gt;Currently, sessions are &lt;i&gt;not&lt;/i&gt; compressed, though this is a feature easily added in the future if it turns out to be beneficial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like most frameworks, the sessions are simple key-value stores. There are three basic operations on a session:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Request.html#v%3AlookupSession"&gt;lookupSession&lt;/a&gt; gets a value for a given key.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Handler.html#v%3AsetSession"&gt;setSession&lt;/a&gt; sets a new value, or replaces an existing value.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Handler.html#v%3AdeleteSession"&gt;deleteSession&lt;/a&gt; clears the value in a session, so that it does not appear in the next request.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that the setSession and deleteSession functions do &lt;b&gt;not&lt;/b&gt; affect the outcome of a call to lookupSession within a single request. In other words:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;do
    val1 &amp;lt;- lookupSession "key"
    setSession "key" "newvalue"
    val2 &amp;lt;- lookupSession "key" -- val1 == val2, not "newvalue"&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Messages&lt;/h3&gt;
&lt;p&gt;Messages are built on top of sessions. The situation is a common one in web development: the user performs a POST request, you make a change, and want to simultaneously tell the user that the request suceeded and redirect them to a new page. Yesod provides a pair of functions to make this very easy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Handler.html#v%3AsetMessage"&gt;setMessage&lt;/a&gt; stores a value in the session.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Handler.html#v%3AgetMessage"&gt;getMessage&lt;/a&gt; both reads the value most recently put into the session, and also clears that old value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my projects, I will often put a call to getMessage in the &lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Yesod.html#v%3AdefaultLayout"&gt;defaultLayout&lt;/a&gt; function and know that any messages I set with setMessage will be displayed on the next page the user views.&lt;/p&gt;
&lt;h3&gt;Ultimate Destination&lt;/h3&gt;
&lt;p&gt;Not to be confused with a horror film, this concept is used internally in the Yesod authentication module. Simply put, let's say a user requests a page that requires authentication. Clearly, you need to send them to the login page. A well-designed web app will then &lt;i&gt;send them back to the first page they requested&lt;/i&gt;. That's what we call the ultimate destination.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Handler.html#v%3AsetUltDest"&gt;setUltDest&lt;/a&gt; sets the ultimate destination to the given route.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Handler.html#v%3AsetUltDest%27"&gt;setUltDest'&lt;/a&gt; is a variant of setUltDest that sets the ultimate destination to the current route.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Handler.html#v%3AsetUltDestString"&gt;setUltDestString&lt;/a&gt; is the same thing, but uses a string instead of a type-safe URL. Can be useful if you want to send a user to another site after authentication.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.yesodweb.com/haddock/yesod/Yesod-Handler.html#v%3AredirectUltDest"&gt;redirectUltDest&lt;/a&gt; sends the user to the ultimate destination currently in his/her session and clears that value from the session.&lt;/li&gt;
&lt;/ul&gt;
</foreign></body></topic>