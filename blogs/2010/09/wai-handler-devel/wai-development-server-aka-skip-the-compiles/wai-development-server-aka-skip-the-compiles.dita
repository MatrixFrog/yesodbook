<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="wai-development-server-aka-skip-the-compiles"><title>WAI development server (aka, skip the compiles)</title><body><foreign outputclass="html">&lt;p&gt;One of the most alluring advantages of dynamic languages is the rapid development cycle. When writing a web app in PHP, for example, you save your changes and see the results &lt;i&gt;immediately&lt;/i&gt;. Us poor Haskellers are stuck compiling all the time.&lt;/p&gt;
&lt;p&gt;Of course, it's not really true that PHP results are immediate. It's simply that PHP reinterprets your code &lt;i&gt;automatically&lt;/i&gt;. But this perceived immediacy is very important. Having to switch back to a console to stop a process and start it up again is tedious.&lt;/p&gt;
&lt;p&gt;So I've just released &lt;a href="http://hackage.haskell.org/package/wai-handler-devel"&gt;version 0.0.0 of wai-handler-devel&lt;/a&gt;. What it does is fairly simple: load up your code at runtime via &lt;a href="http://hackage.haskell.org/package/hint"&gt;hint&lt;/a&gt;, check for code changes every second and otherwise simply respond like a plain old simpleserver. This release has &lt;i&gt;not&lt;/i&gt; been extensively tested, and has one known bug: it doesn't respond to a Ctrl-C on the console properly. Patches welcome; I just wanted to get this out the door quickly.&lt;/p&gt;
&lt;p&gt;This package comes with a command line tool and a library. The library exports a single function, &lt;code&gt;run&lt;/code&gt;, which happens to take the exact same arguments as the command line tool. These are the port number, the module name containing the application function, and the name of the application function. The only tricky thing is the type signature for the application function. Instead of simply using the WAI Application datatype, the function must have a type signature of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; withYourApp :: (Application -&amp;gt; IO ()) -&amp;gt; IO ()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By having this funny signature, it allows applications to be written in the with-style, making automatic resource management simpler. The Yesod scaffolding tool, for example, creates a function like this by default.&lt;/p&gt;
&lt;p&gt;This code is very young, so please abuse it and make it break. This should hopefully make it much easier to test out WAI applications, and Yesod applications in particular.&lt;/p&gt;
</foreign></body></topic>