<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="persistent-plugs"><title>Persistent Plugs</title><body><foreign outputclass="html">&lt;p&gt;Sorry if the title sounds like a medical condition...&lt;/p&gt;
&lt;p&gt;Anyway, it's been quite busy since releasing the &lt;a href="http://www.yesodweb.com/code.html"&gt;Yesod web framework&lt;/a&gt;. I got a lot of very useful feedback, especially from Jeremy Shaw and Chris Eidhof. There are two main shortcomings of Yesod (and Haskell web programming in general) that we've discussed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Persistence&lt;/li&gt;
&lt;li&gt;Type-safe URL handling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We've had &lt;a href="http://www.haskell.org/pipermail/web-devel/2010/000120.html"&gt;a very good discussion about the latter&lt;/a&gt; on the &lt;a href="http://www.haskell.org/mailman/listinfo/web-devel"&gt;web-devel mailing list&lt;/a&gt;; I highly recommend that everyone subscribe to that list by the way.&lt;/p&gt;
&lt;p&gt;That discussion inspired me a little bit for a persistence interface, and so I started &lt;a href="http://github.com/snoyberg/persistent"&gt;a project today called persistent&lt;/a&gt;. The goal is to provide a unified interface to any storage backend, be it SQL, in-memory, YAML files, or Amazon SimpleDB.&lt;/p&gt;
&lt;p&gt;At the moment, it only handles String and Int data, allows all CRUD actions and the ability to filter in a very basic way. All of this will need to be augmented to be usable, but it shows the overall structure fairly well. I've also written an in-memory sample storage mechanism; everything together clocks in at &lt;a href="http://github.com/snoyberg/persistent/blob/master/Data/Persist.hs"&gt;a single 145 line file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But that's not the cool part. The cool part is &lt;i&gt;synthesizing these two goals&lt;/i&gt; to get completely pluggable web components. As an example, I wrote up a basic web authentication plugin. All of the code &lt;a href="http://github.com/snoyberg/persistent/blob/master/auth-example.hs"&gt;is available in the same repository&lt;/a&gt;, and is only 164 lines- including a lot of boilerplate HTML.&lt;/p&gt;
&lt;p&gt;The approach taken for both sides of the puzzle here is to provide a low-level, tedious, boilerplate-requiring interface that gives the user a lot of power. Both of these pieces can then be automated later through some higher-level mechanism, be it template haskell, generics or (my favorite) quasi-quoting.&lt;/p&gt;
&lt;p&gt;If you want to try out the auth example, I've hard-coded michael/michael as the only username/password combination that works. Eventually, when we hammer out a good API for both sides of this, I would like to actually develop a fully-functional authentication plug-in that supports e-mail validation, allows OpenID, Twitter and other external logins, and more. And then any system that supports persistent and the web plug-in system will be able to have a very advanced authentication system for free.&lt;/p&gt;
</foreign></body></topic>