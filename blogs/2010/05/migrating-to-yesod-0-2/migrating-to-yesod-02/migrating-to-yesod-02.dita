<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="migrating-to-yesod-02"><title>Migrating to Yesod 0.2</title><body><foreign outputclass="html">&lt;p&gt;I've nearly completed the migration of &lt;a href="http://www.search-once.com/"&gt;my largest site&lt;/a&gt; from the current version of Yesod to the &lt;a href="http://docs.yesodweb.com/yesod/"&gt;upcoming Yesod 0.2 release&lt;/a&gt;. I just wanted to share some of my experience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In this site, the code fairly evenly splits into three parts: database interaction, logic code (site parsing to be specific) and the web interface. As would be expected, the first two required no modification at all.&lt;/li&gt;
&lt;li&gt;The most time was spent migrating from HStringTemplate to Hamlet, but I'm very happy with the results over all. Overall, I'd break it down like this:
&lt;h4&gt;Advantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Easier to follow nesting.&lt;/li&gt;
&lt;li&gt;Less typing.&lt;/li&gt;
&lt;li&gt;Nicer to declare a new datatype than to create arbitrary nested-string-like data structures.&lt;/li&gt;
&lt;li&gt;Type-safe URLs are a &lt;b&gt;huge&lt;/b&gt; win.&lt;/li&gt;
&lt;li&gt;When I'm lazy in a conversion, I can just copy in HTML code, and it usually works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Disadvantages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;There's not good way to conditionally add a attribute. Most of the time, that's no big deal; but when you want to add "selected" to an option tag, it's an annoyance. I ended up writing code like this:
&lt;pre&gt;&lt;code&gt;&amp;lt;option foo=bar
$if shouldBeSelected
   selected
&amp;gt;&amp;lt;/option&amp;gt;&lt;/code&gt;&lt;/pre&gt;
This is clearly sub-optimal.&lt;/li&gt;
&lt;li&gt;You can have multi-word values for attributes embedded in the template. So in order to achieve &lt;code&gt;&amp;lt;input type="submit" value="Click me"&amp;gt;&lt;/code&gt;, I ended up writing &lt;code&gt;%input!type=submit!value=clickMe&lt;/code&gt;, and declaring a function &lt;code&gt;clickMe _ = cs "Click me"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It &lt;i&gt;can&lt;/i&gt; be a little tedious having all those extra datatypes just for template arguments, but I suppose that's the price to pay for type safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I much prefer the new route syntax. Previously, it used Yaml; that was really too verbose. Now each resource is defined on a single line, and handler names are automatically determined from the constructor name.&lt;/li&gt;
&lt;li&gt;Type-safe URLs already caught a few bugs for me. I think this will be a major cornerstone for Yesod programming. I can now easily write code such as &lt;code&gt;redirect RedirectTemporary $ UserPage userId&lt;/code&gt;, and it &lt;i&gt;just works&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Subsites are great, but it's a very complicated concept. It's made web-routes-quasi more complex than I would have hoped to, and necesitated added some extra information to the Handler monad. I think that this will pay off in the end; unfortunately, Yesod 0.2 subsites may still be a little unpolished.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For those of you playing around with Hamlet, I would definitely point out: do not be afraid to define helper functions that ignore their first argument. It's been completely necessary for me.&lt;/p&gt;
&lt;p&gt;I'm still adding tutorials, refining the documentation and making some code changes, but I should be releasing very soon (latest would be next week). I encourage everyone to &lt;a href="http://docs.yesodweb.com/yesod/"&gt;check out the documentation&lt;/a&gt; and give me any feedback you have! I'm especially interested in people's thoughts on a persistance layer, which is notably &lt;i&gt;lacking&lt;/i&gt; right now.&lt;/p&gt;
</foreign></body></topic>