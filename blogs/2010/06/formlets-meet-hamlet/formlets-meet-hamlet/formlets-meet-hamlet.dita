<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="formlets-meet-hamlet"><title>Formlets meet Hamlet</title><body><foreign outputclass="html">&lt;p&gt;I just scratched a whole bunch of itches at once. I've been wanting to integrate formlets with Yesod, I've wanted Django-style generics, and somehow combining form generation with model definitions.&lt;/p&gt;
&lt;p&gt;Well, the generics could be a little more generic, and I'm not sold 100% on formlets, but there's some definite progress. I also want to discuss some future directions for Hamlet.&lt;/p&gt;
&lt;h3&gt;Type-based form definitions&lt;/h3&gt;
&lt;p&gt;A major driving force behind the persistent package is having the types define a lot of characteristics. For example: in Django, you would define a string field and then specify that you want it to be non-empty (non-null? I don't remember their terminology). I believe the equivalent functionality for persistent should be through types. So, we would have a &lt;code&gt;newtype NonEmptyString = NonEmptyString String&lt;/code&gt;. Then, the &lt;code&gt;Persistable&lt;/code&gt; instance can do any validation that it wants.&lt;/p&gt;
&lt;p&gt;By having all of these specifications in the type, we can easily extend this to deal with fields. Let's have a typeclass:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Fieldable a where
    fieldable :: String -&gt; Formlet (Hamlet url IO ()) m a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then when we define the &lt;code&gt;NonEmptyString&lt;/code&gt; instance, we have it verify that strings aren't empty. (If you're wondering, that first String argument is simply for defining the label of the field.) Then we'll have another class:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Formable a where
    formable :: Formlet (Hamlet url IO ()) m a&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can automatically generate Formable instances (via template haskell) for any datatype that is fully made up of Fieldable instances.&lt;/p&gt;
&lt;p&gt;Taking it a step further: if we also have a &lt;code&gt;Persist&lt;/code&gt; instance for this datatype, then we can automatically create, read, update and delete these types. By having a Fieldable instance, we can ask the user for input on the data. And voila! we have a generic CRUD system.&lt;/p&gt;
&lt;p&gt;The code in question is &lt;a href="http://github.com/snoyberg/persistent/blob/master/blog.hs"&gt;available on github&lt;/a&gt;. I'd like to eventually turn CRUD into its own subsite, but I believe the subsite system will need a little more work to make this happen. Looks like a good project for Yesod 0.3.0.&lt;/p&gt;
&lt;h3&gt;Access Control Lists&lt;/h3&gt;
&lt;p&gt;In the project I'm contracting on right now, I'm going to need to implement permissions management. I'm considering a very simple extension to yesod to allow this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data PermissionResult = Permitted | RequiredAuthentication | NotAuthorized String

-- in the Yesod typeclass
authenticateRoute :: y -&gt; Maybe (Routes y)
authenticateRoute _ = Nothing
isPermitted :: Routes y -&gt; Handler y PermissionResult
isPermitted _ = return Permitted&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's really cool about this approach is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can completely separate the authorization logic from the rest of the application.&lt;/li&gt;
&lt;li&gt;You can't accidently forget to specify the settings for a route.&lt;/li&gt;
&lt;li&gt;Before showing the user a link, you can call isPermitted yourself and decide if they should see it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Hamlet modifications&lt;/h3&gt;
&lt;p&gt;The first one I'm considering is migrating away from the text package. I think it's massively slowing down hamlet (based on my bigtable benchmarks). Instead, I think Hamlet will work on UTF8-encoded bytestrings. Additionally, we can do a lot of the UTF8-encoding of strings at compile-time instead of runtime, hopefully speeding things up more. And if someone &lt;i&gt;really&lt;/i&gt; wants a different encoding, they can re-encode the bytestrings.&lt;/p&gt;
&lt;p&gt;I'm also considering removing interleaved IO support. There's three main reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most reasons for interleaved IO are not a good idea anyway. For example, it's probably best &lt;i&gt;not&lt;/i&gt; to interleave database calls, as that will hog a database connection longer than is necessary.&lt;/li&gt;
&lt;li&gt;It adds a lot of complexity to the system. Based on some profiling, I believe the enumerators in particular are giving serious slow-downs versus pure, lazy lists.&lt;/li&gt;
&lt;li&gt;The Hamlet datatype could be greatly simplified from a Monad to... well, maybe all the way to &lt;code&gt;(url -&gt; String) -&gt; Lazy.ByteString&lt;/code&gt;. I'd probably keep a newtype wrapper, and allow some instances like &lt;code&gt;Monoid&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please let me know if anyone is relying on any of the Hamlet features I'm considering removing.&lt;/p&gt;
</foreign></body></topic>