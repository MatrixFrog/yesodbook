<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="meet-the-partially-powered-languages"><title>Meet the Partially Powered Languages</title><conbody>
  <p id="x1">So if not Java, then what? Well, there were actually three additional languages used in the
   development of the project, with one of them being replaced halfway through:</p>
  <ul id="ul_uus_ssi_jd">
   <li id="x2">XSLT, used for transforming XML.</li>
   <li id="x3">XProc, an XML pipeline language. More on this later.</li>
   <li id="x4">Ant, used to orchestrate all this.</li>
  </ul>
  <p id="x5">This list may seem a bit arbitrary, but it's not. One of the major tools used in the document
   services industry is the DITA-OT, and it is a polyglot of Java, XSLT and Ant. There is a lot of
   interest in migrating to XProc for both simplification and performance improvements, and the
   client specifically mentioned an interest in XProc since they are using it elsewhere.</p>
  <p id="x6">Why do I call these partially powered languages? Quite simply, each language is good for its
   specific task, but can't (easily) do anything else. Take XProc: it's a language designed to piece
   together a number of XML-transforming operations. The approach often used today by tools like the
   DITA-OT is to use Ant to call out to XSLT for each pipeline step, storing the intermediate
   results in a temp folder. As you can imagine, all of that file I/O, parsing and rendering carries
   a performance penalty.</p>
  <p id="x7">So I thought that XProc would be perfect here... until I found out there was no direct way to
   create a ZIP file from it. (ePubs are just glorified ZIP files.) This isn't a bug in XProc, or
   something for which the library has not yet been written, but simply a fact of the language: its
   goals do not include producing ZIP files. And that's precisely the problem: it's not very common
   that someones needs fit perfectly into the use case of the tool in question.</p>
  <p id="x8">Here's another example from this project. XSLT turned out to be fairly straight-forward for
   most of the implementation. (Besides the fact that there are a whole bunch of issues with
   relative file paths waiting to rear their ugly heads... but for now, the XML is simple, so we
   took the easy route.) And using XSLT 2.0 allowed us to write this thing to generate multiple
   output files from a single input file, meaning a single XSLT call to produce all the output,
   avoiding all those temporary XML files I mentioned earlier. Hurray!</p>
  <p id="x9">And all was well... until I got to the end. One of the XML files in an ePub (content.opf)
   requires a list of all the files contained in the ZIP file. No problem, I can generate a list of
   all the HTML files I generated. But I don't have a list of all the static files, like CSS and
   images, that were used. In theory, I could glean all the images referenced from the XML directly,
   but I don't know about any images referenced from the CSS. And XSLT can't parse CSS, so that's
   not an option.</p>
  <p id="x10">There's actually a very simple solution: just get a list of all the files in the static folder.
   Heck, I can use that for the HTML too if I want to be lazy! All I need to do is use that XSLT
   directory listing function... that function that doesn't exist. You see, getting a list of files
   in a folder is not in the purview of XSLT. It knows how to read, manipulate, and generate XML. So
   how did I solve this? Well, the standard way we do things in the DITA-OT:</p>
  <ol id="ol_yxy_qwi_jd">
   <li id="x11">Write some Java code that lists files in folder and outputs them as an XML file.</li>
   <li id="x12">Call that code before calling XSLT.</li>
   <li id="x13">Pass in a referenced to that generated file when calling the XSLT. Let XSLT do its normal
    stuff at that point.</li>
  </ol>
  <p id="x14">As for Ant... well, anyone familiar with it will know its powers. It can easily do stuff like
   copy files, compile Java, and call XSLT. And it can easily be extended with new features, by
   defining new Ant tasks- in Java. Which just proves the point: it can do some stuff itself, but
   not everything.</p>
 </conbody></concept>