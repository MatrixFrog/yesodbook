<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="migration-guide-yesod-08-to-09"><title>Migration guide: Yesod 0.8 to 0.9</title><conbody>  <p id="x1">As has become a bit of a custom, we're going to go through the necessary changes to the
   Haskellers codebase to get it to work with the new release. Fortunately, there are many less
   steps in this release. You can see the <xref id="x2" href="https://github.com/snoyberg/haskellers/commit/1ba421449c29d8d2b653055b746ee1afe98430e9" format="html" scope="external">entire commit on Github</xref>. To give you an idea of time
   investment, it took me about two hours to migrate Haskellers, write this guide, and apply a few
   minor tweaks to the framework in the process.</p>
  <ol id="ol_sap_jic_kd">
   <li id="x3">Fix up your cabal file. For the most part, just change yesod to version 0.9 and watch the
    fallout. Pay particular attention to the version bounds on related packages like hamlet and
    persistent. Also:<ul id="ul_bqz_mic_kd">
     <li id="x4">hamlet has been split out into multiple packages. You'll likely get build errors telling
      you to add shakespeare-css and shakespeare-js</li>
     <li id="x5">Due to issues with the newest aeson and Template Haskell, we had to create a fork. The API
      is identical, the only difference is in how doubles are rendered. Just updated any references
      to aeson to be aeson-native.</li>
    </ul></li>
   <li id="x6">Goodbye "Helpers" module namespace. This affects Yesod.Helpers.Static, Yesod.Helpers.Auth.*,
    Yesod.Helpers.Feed.* and others. All you need to do is remove the word Helpers.</li>
   <li id="x7">The datatypes from hamlet have been renamed. This likely doesn't affect much code, but just
    be aware of it.<simpletable id="simpletable_aiq_yic_kd">
     <sthead id="x8">
      <stentry id="x9">Old name</stentry>
      <stentry id="x10">New name</stentry>
     </sthead>
     <strow id="x11">
      <stentry id="x12">Hamlet</stentry>
      <stentry id="x13">HtmlUrl</stentry>
     </strow>
     <strow id="x14">
      <stentry id="x15">Cassius/Lucius</stentry>
      <stentry id="x16">CssUrl</stentry>
     </strow>
     <strow id="x17">
      <stentry id="x18">Julius</stentry>
      <stentry id="x19">JavascriptUrl</stentry>
     </strow>
     <strow id="x20">
      <stentry id="x21">IHamlet</stentry>
      <stentry id="x22">HtmlUrlI18n</stentry>
     </strow>
    </simpletable></li>
   <li id="x23">Forms have had a significant overhaul. This will be the most labor-intensive part of the
    migration. I'll address this later.</li>
   <li id="x24">In your Model.hs file, mkPersist now takes an extra parameter to give it settings. For now
    use sqlSettings, we'll have some more options in the future.</li>
   <li id="x25">Model.hs needs the GADTs language extension enabled.</li>
   <li id="x26">In your application file (e.g., Haskellers.hs), remove the type synonyms for Handler and
    Widget. This is now provided by the TH code. Also, instead of Widget (), just say Widget.</li>
   <li id="x27">In the YesodPersist instance, change "YesodDB" to "YesodPersistBackend".</li>
   <li id="x28">The other big change: the filter API for persistent became <b id="x29">much</b> simpler. Instead of
    using constructors like "PersonNameEq", we now just use operators. (Thanks to Boris for the
     <apiname id="x30">groundhog</apiname> inspiration here.) Some simple examples:<simpletable id="simpletable_uml_bkc_kd">
     <sthead id="x31">
      <stentry id="x32">Old code</stentry>
      <stentry id="x33">New code</stentry>
     </sthead>
     <strow id="x34">
      <stentry id="x35">PersonNameEq "Michael"</stentry>
      <stentry id="x36">PersonName ==. "Michael"</stentry>
     </strow>
     <strow id="x37">
      <stentry id="x38">PersonAgeLe 30</stentry>
      <stentry id="x39">PersonAge &lt;=. 30</stentry>
     </strow>
     <strow id="x40">
      <stentry id="x41">UserEmailNe $ Just "foo@bar.com"</stentry>
      <stentry id="x42">UserEmail !=. Just "foo@bar.com"</stentry>
     </strow>
    </simpletable>There will be a bit of manual effort involved in this transition, but the result
    is well worth it.</li>
   <li id="x43">select syntax has changed. Instead of having those two hanging integers at the end, we have a
    list of options. An example should suffice:<dl id="x44">
     <dlentry id="x45">
      <dt id="x46">Old</dt>
      <dd id="x47">selectList [PersonNameEq "Michael"] [PersonAgeDesc] 5 10</dd>
     </dlentry>
     <dlentry id="x48">
      <dt id="x49">New</dt>
      <dd id="x50">selectList [PersonName ==. "Michael"] [Desc PersonAge, LimitTo 5, OffsetBy 10]</dd>
     </dlentry>
    </dl>If you had a 0 for either of those trailing integers, they can just be ignored.</li>
   <li id="x51">Updates are similarly changed.<dl id="x52">
     <dlentry id="x53">
      <dt id="x54">Old</dt>
      <dd id="x55">update personId [PersonName "Michael"]</dd>
     </dlentry>
     <dlentry id="x56">
      <dt id="x57">New</dt>
      <dd id="x58">update personId [PersonName =. "Michael"]</dd>
     </dlentry>
    </dl></li>
   <li id="x59">And a great sigh of relief was heard: polymorphic hamlet is gone. For the most part, this
    just means you'll need to preface a few hamlet calls with toWidget. Unfortunately, the error
    messages are confusing; just email the list if you get stuff on somthing.</li>
<li id="x90">There have been some renames in the templates. It's best to just <xref id="x91" href="http://www.yesodweb.com/show/map/118">read the chapter</xref> for details.</li>
   <li id="x60">We added i18n support for form messages. You'll need to add this to your application file
    (e.g.,
    Haskellers.hs)<codeblock id="x61">instance RenderMessage Haskellers FormMessage where
    renderMessage _ _ = defaultFormMessage</codeblock>This
    uses the default values, which are all English. You can modify these yourself if you want,
    expect some blog posts in the next few weeks focusing on how i18n works.</li>
   <li id="x62">Under some strange conditions, you'll have to give your ID variables explicit type
    signatures. This is exceedingly rare.</li>
  </ol>
  <section id="x63">
   <title id="x64">Forms</title>
   <p id="x65">Forms got a huge cleanup in this release. I'm hoping to get the chapter up-to-date soon, but
    the migration guide isn't enough to fully explain what's happened. I'll just give a few quick
    translations that I've used in Haskellers:</p>
   <simpletable id="simpletable_jqe_vlc_kd">
    <sthead id="x66">
     <stentry id="x67">Old code</stentry>
     <stentry id="x68">New code</stentry>
    </sthead>
    <strow id="x69">
     <stentry id="x70">runFormPost'</stentry>
     <stentry id="x71">runInputPost</stentry>
    </strow>
    <strow id="x72">
     <stentry id="x73">maybeStringInput</stentry>
     <stentry id="x74">iopt textField</stentry>
    </strow>
    <strow id="x75">
     <stentry id="x76">stringInput</stentry>
     <stentry id="x77">ireq textField</stentry>
    </strow>
    <strow id="x78">
     <stentry id="x79">runFormGet'</stentry>
     <stentry id="x80">runInputGet</stentry>
    </strow>
    <strow id="x81">
     <stentry id="x82">maybeIntInput</stentry>
     <stentry id="x83">iopt intField</stentry>
    </strow>
    <strow id="x84">
     <stentry id="x85">maybeStringField</stentry>
     <stentry id="x86">aopt textField</stentry>
    </strow>
    <strow id="x87">
     <stentry id="x88">fieldsToTable</stentry>
     <stentry id="x89">renderTable</stentry>
    </strow>
   </simpletable>
  </section>
 </conbody></concept>