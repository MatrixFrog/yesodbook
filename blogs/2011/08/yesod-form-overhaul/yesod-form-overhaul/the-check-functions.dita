<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="the-check-functions"><title>The check functions</title><conbody>
  <p id="x1">Now that the structure has been corrected, furnishing is easy. At this point, I'll let the code
   speak for itself:</p>
  <codeblock id="x2">check :: RenderMessage master msg
      =&gt; (a -&gt; Either msg a) -&gt; Field sub master a -&gt; Field sub master a
check f = checkM $ return . f

-- | Return the given error message if the predicate is false.
checkBool :: RenderMessage master msg
          =&gt; (a -&gt; Bool) -&gt; msg -&gt; Field sub master a -&gt; Field sub master a
checkBool b s = check $ \x -&gt; if b x then Right x else Left s

checkM :: RenderMessage master msg
       =&gt; (a -&gt; GGHandler sub master IO (Either msg a))
       -&gt; Field sub master a
       -&gt; Field sub master a
checkM f field = field
    { fieldParse = \ts -&gt; do
        e1 &lt;- fieldParse field ts
        case e1 of
            Left msg -&gt; return $ Left msg
            Right Nothing -&gt; return $ Right Nothing
            Right (Just a) -&gt; fmap (either (Left . SomeMessage) (Right . Just)) $ f a
    }</codeblock>
  <p id="x3">And just to motivate this a bit more, the use code from the <xref id="x4" href="https://github.com/yesodweb/yesod/blob/master/yesod-form/hello-forms.hs" format="html" scope="external">hello-forms.hs sample</xref>. Note that this code simply uses Text values for
   its validation messages. If you're not concerned with i18n, this is always an option in your
   applications.</p>
  <codeblock id="x5">myValidForm = runFormGet $ renderTable $ pure (,,)
    &lt;*&gt; areq (check (\x -&gt;
            if T.length x &lt; 3
                then Left ("Need at least 3 letters" :: Text)
                else Right x
              ) textField)
            "Name" Nothing
    &lt;*&gt; areq (checkBool (&gt;= 18) ("Must be 18 or older" :: Text) intField)
            "Age" Nothing
    &lt;*&gt; areq (checkM inPast dayField) "Anniversary" Nothing
  where
    inPast x = do
        now &lt;- liftIO getCurrentTime
        return $ if utctDay now &lt; x
                    then Left ("Need a date in the past" :: Text)
                    else Right x</codeblock>
  <note id="x6">The type signatures on the strings are necessary due to our usage of OverloadedStrings. It
   would be nice if GHC had some defaulting rules when it gets confused, but that's not the case
   yet.</note>
 </conbody></concept>