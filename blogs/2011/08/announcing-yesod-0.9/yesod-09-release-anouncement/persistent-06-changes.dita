<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="persistent-06-changes"><title>Persistent 0.6 Changes</title><body><foreign outputclass="markdown">Feature-wise, there were only a few additions to Persistent 0.6 The most noticeable addition is support for "OR" queries. However, the implementation has undergone a complete re-write, making Persistent more powerful and flexible, and allowing us to switch from constructors to operators.

## Persistent 0.6, a re-write and a better API

Old:

~~~~{.haskell}
selectList [PersonNameEq "bob"] [] 0 0
~~~~

New:

~~~~{.haskell}
selectList [PersonName ==. "bob"] []
~~~~

We are using 2 extra characters to make the same selection. However, the separation between field and operator makes for more readable code, and we have removed one use of Template Haskell to create the constructor with an Eq postfix. Our policy on Template Haskell has always been to use it *only* when the same cannot be achieved without it. When Michael originally wrote Persistent, it wasn't clear to him how to implement the operator approach rather than the constructor approach. The [release of the Groundhog library](http://www.reddit.com/r/haskell/comments/i23ln/announce_groundhog_a_database_connectivity_library/) showed how this can be done. We had a [discussion](http://www.yesodweb.com/show/map/106) with Boris Lykah, the Groundhog author, and figured out what we could learn from Groundhog. Persistent is now using phantom types, similar to Boris's approach.

We also discussed possible APIs at length. For Persistent we settled on something that is composable in a way similar to Groundhog, but slightly more optimized for the common use case. The main difference people will notice is no more hanging zeroes! That can be seen in the example above. The zeroes represent the limit and offset. Lets see how they are handled now when you actually need them:


Old:

~~~~{.haskell}
selectList [PersonName ==. "bob"] [] 5 5
~~~~

New:

~~~~{.haskell}
selectList [PersonName ==. "bob"] [OffsetBy 5, LimitTo 5]
~~~~

More verbose when you actually need it- but still better in that case in my mind because it is now clear which is the limit and which is the offest- the reason why I used 5 for both is because I never remembered the argument order of the older style.

The old style of sorting required constructors created by Template Haskell. Here again, we used the Groundhog approach of re-using Desc and Asc constructors with the field types.

Old:

~~~~{.haskell}
selectList [] [PersonNameAsc, PersonLastNameAsc] 0 0
~~~~

New:

~~~~{.haskell}
selectList [] [Asc PersonName, Asc PersonLastName]
~~~~


This shows why we are using lists- it makes it easy to combine pieces of a query in Haskell syntax. The most common query combination is to AND multiple conditions:

~~~~{.haskell}
selectList [PersonName ==. "bob", PersonLastName ==. "jones"] []
~~~~

Lets show the OR implementation:

~~~~{.haskell}
selectList ([PersonName ==. "bob"] ||. [PersonLastName ==. "jones"]) []
~~~~

This is not a great DSL syntax- it does require parentheses. However, OR is actually a very rare use case- so we just want something that works well and is intuitive rather than the most compact notation.

### Less Template Haskell is good

Persistent still requires the same basic amount of Quasi-Quoting from the user to declare datatypes.

~~~~
mkPersist sqlSettings [persist|
  Person
    name String
    lastName String
|]
~~~~

However, operator annotations (Update, LT, GT, etc) are no longer required, reducing what is required from users in their quasi-quoted models for the normal use case. And the Template Haskell generated is now substantially less. This should speed up compilation time and make Persistent more extensible. The Quasi-Quoting of datatypes is still important to allow for a friendly interface with easy customizations. However, it would no longer be difficult to provide a Template Haskell interface to Persistent (and we would welcome such a patch). In fact, the Template Haskell portion of persistent is an entirely separate cabal project, and one can manually declare types in the persistent style now. There are some iphone users doing this now because Template Haskell did not work on the iphone.

### Limitations

MongoDB is waiting on some upstream improvements we are helping to create in the MongoDB driver. This release has been great for Mongo though- we are really excited about the ability to add custom operators to better take advantage of MongoDB.

The biggest limitation on Persistent that makes using it worse is Haskell's lack of record name-spacing.
</foreign></body></topic>