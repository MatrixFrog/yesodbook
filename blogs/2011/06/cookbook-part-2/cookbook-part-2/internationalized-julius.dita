<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="internationalized-julius"><title>Internationalized Julius</title><conbody>  <p id="x1">Hamlet has built-in support for i18n via the underscope interpolation syntax:</p>
  <codeblock id="x2">&lt;h1&gt;_{MsgHelloWorld}</codeblock>
  <p id="x3">There was a concious decision not to include this syntax for Cassius, Lucius and Julius,  since
   it is relatively uncommon to need this interpolation, and the added complexity of using the
   library didn't seem to warrant it. However, there are times when you do want to add an
   internationalized message to your Javascript.</p>
  <p id="x4">The trick is fairly simple: <codeph id="x5">getMessageRender</codeph> returns a function that will
   convert a type-safe message into an actual string. We can directly use those strings with normal
   variable interpolation. getMessageRender handles all the work of determining the user's language
   preference list.</p>
  <codeblock id="x6">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE QuasiQuotes #-}
import Yesod

data JI = JI
type Handler = GHandler JI JI
mkYesod "JI" [parseRoutes|
/ RootR GET
|]

instance Yesod JI where
    approot _ = ""

data JIMsg = MsgHello

instance RenderMessage JI JIMsg where
    renderMessage a [] x = renderMessage a ["en"] x
    renderMessage _ ("en":_) MsgHello = "Hello"
    renderMessage _ ("es":_) MsgHello = "Hola"
    renderMessage a (_:ls) x = renderMessage a ls x

getRootR :: Handler RepHtml
getRootR = do
    render &lt;- getMessageRender
    defaultLayout $ addJulius [julius|alert("#{render MsgHello}")|]

main :: IO ()
main = warpDebug 3000 JI</codeblock></conbody></concept>