<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="adding-a-local-javascript-file"><title>Adding a local Javascript file</title><conbody>  <p id="x1">There are two main functions used to include a reference to an external Javascript file:
    <codeph id="x2">addScript</codeph> and <codeph id="x3">addScriptRemote</codeph>. The latter is used when you
   want to provide the actual URL to the script, and can be especially useful for referencing
   CDN-hosted libraries, such as <xref id="x4" href="http://code.google.com/apis/libraries/devguide.html#jquery" format="html" scope="external">Google-hosted jQuery</xref>.</p>
  <p id="x5">The former function is used when you want to refer to a type-safe URL. The most common case of
   this is with the <apiname id="x6">yesod-static</apiname> package; if you want to use that, the best place
   to see an example usage is in the scaffolded site. Here is a minimal example using the
   lower-level <codeph id="x7">sendFile</codeph>.</p>
  <codeblock id="x8">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TemplateHaskell #-}
import Yesod

data Local = Local
type Handler = GHandler Local Local

mkYesod "Local" [parseRoutes|
/ RootR GET
/myfile.js MyFileJsR GET
|]

instance Yesod Local where
    approot _ = ""

getRootR = defaultLayout $ do
    addScript MyFileJsR
    addHamlet [hamlet|
&lt;h1&gt;HELLO WORLD!
|]

 -- type sig necessary, since sendFile is polymorphic
getMyFileJsR :: Handler ()
-- Serves "myfile.js" with text/javascript mime-type.
-- Served from /myfile.js as defined above, but your code needn't know that.
getMyFileJsR = sendFile "text/javascript" "myfile.js"

main = warpDebug 3000 Local</codeblock></conbody></concept>