<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="-yesod-proxy-server"><title> Yesod Proxy Server</title><conbody>  <p id="x1">Yesod is built on top of WAI, which in turn is built on enumerators. One of the advantages of
   enumerators is being able to work with streams of data, in constant space. By building on a
   central enumerator system, multiple libraries are able to interoperate very easily. In our case,
   both WAI and <apiname id="x2">http-enumerator</apiname> share an enumerator approach. Combined with
   Aristid Breitkreuz's <apiname id="x3">http-types</apiname>, it is much easier to get these packages to
   interoperate.</p>
  <p id="x4">Unfortunately, there are still a few gotchas. If you're not familiar with enumerators, it can
   be difficult to get the types to work out. Yesod purposely doesn't advertise the low-level
   functions necessary to get things to work, since they are confusing to new users. And there's a
   bit of a catch with Builders versus ByteStrings. We'll step through a very simple Yesod app that
   proxies the Yesod homepage. We'll start with our standard language extensions:</p>
  <codeblock id="x5">{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}</codeblock>
  <p id="x6">Next we have our import statements. Try to follow which modules/libraries and providing
   different functionalities.</p>
  <codeblock id="x7">import Yesod hiding (Request)
import Network.HTTP.Enumerator (parseUrl, withManager, http, Request)
import Network.HTTP.Types (Status, ResponseHeaders)
import Network.Wai (Response (ResponseEnumerator))
import Data.ByteString (ByteString)
import Blaze.ByteString.Builder (Builder, fromByteString)
import Data.Enumerator (Iteratee, run_, ($$), joinI)
import qualified Data.Enumerator.List as EL</codeblock>
  <p id="x8">And now some simple code to create a new Yesod application with a single route and is served by
   Warp:</p>
  <codeblock id="x9">data Proxy = Proxy
type Handler = GHandler Proxy Proxy

mkYesod "Proxy" [parseRoutes|
/ RootR GET
|]

instance Yesod Proxy where
   approot _ = ""

main :: IO ()
main = warpDebug 3000 Proxy</codeblock>
  <p id="x10">All that's left is to define our handler function. If we look at the
    <apiname id="x11">http-enumerator</apiname> package, we'll see that there are a number of functions
   available for running an HTTP request. However, all of them (except simpleHttp) take a Request.
   So we'll start by using parseUrl to generate such a value. We'll take advantage of the IO
   instance of Failure by using liftIO:</p>
  <codeblock id="x12">getRootR :: Handler ()
getRootR = do
   req &lt;- liftIO $ parseUrl "http://www.yesodweb.com/"</codeblock>
  <p id="x13">For this exercise, we're going to use the <codeph id="x14">http</codeph> function, which has the
   signature:</p>
  <codeblock id="x15">http :: Request IO 
     -&gt; (Status -&gt; ResponseHeaders -&gt; Iteratee ByteString IO a)
     -&gt; Manager
     -&gt; Iteratee ByteString IO a</codeblock>
  <note id="x16">http is a bit more polymorphic than this, allowing any instance of MonadIO. Additionally, we
   could swap out httpRedirect for http here if we wished; httpRedirect will automatically follow
   3xx redirects.</note>
  <p id="x17">Alright, the Manager is simply a collection of open connections. We can generate one using
   withManager. And we already have our request. Now we need to do something about that second
   argument. But it looks strangely familiar... let's look at the definition of ResponseEnumerator
   from WAI:</p>
  <codeblock id="x18">type ResponseEnumerator a = (Status -&gt; ResponseHeaders -&gt; Iteratee Builder IO a) -&gt; IO a</codeblock>
  <p id="x19">Interesting... it's almost identical, except for the ByteString versus Builder issue. Let's
   take a quick break from the definition of getRootR and define a new function, blaze, to help us
   out here:</p>
  <codeblock id="x20">blaze :: (Status -&gt; ResponseHeaders -&gt; Iteratee Builder IO a)
      -&gt; Status -&gt; ResponseHeaders -&gt; Iteratee ByteString IO a
blaze f status headers =</codeblock>
  <p id="x21">First, a little side note: http-enumerator returns all of the content headers from the server,
   including content-encoding. This can cause a bit of a problem for clients (you know, they don't
   like being told their data is encoded when it isn't), so we need to strip that header out:</p>
  <codeblock id="x22">    let notEncoding ("Content-Encoding", _) = False
        notEncoding _ = True
        headers' = filter notEncoding headers</codeblock>
  <p id="x23">Next, we want to get apply the status and headers to f to get our Builder Iteratee:</p>
  <codeblock id="x24">        --builderIter :: Iteratee Builder IO a
        builderIter = f status headers'</codeblock>
  <p id="x25">Finally, we need to turn our Builder Iteratee into a ByteString Iteratee. Let's remember that
   an Iteratee is a data consumer, being fed a stream of data. In order to convert an Iteratee to
   receive a new stream type, we need to stick an adapter at the beginning of it, called an
   Enumeratee. In our case, we need to convert a stream of ByteStrings to a stream of Builders. For
   this, we can use Data.Enumerator.List.map and fromByteString, together with joinI and $$ for some
   glue:</p>
  <codeblock id="x26">     in joinI $ EL.map fromByteString $$ builderIter</codeblock>
  <p id="x27">Well, now that our helper function is done, we can return to http. We need to use
   sendWaiResponse, which will let us send a raw WAI response from our Yesod app. And we'll want to
   use the ResponseEnumerator constructor for Response. So our getRootR ends up looking like:</p>
  <codeblock id="x28">getRootR :: Handler ()
getRootR = do
   req &lt;- liftIO $ parseUrl "http://www.yesodweb.com/"
   sendWaiResponse $ ResponseEnumerator $ inside req</codeblock>
  <p id="x29">And we need inside to have a type signature of:</p>
  <codeblock id="x30">inside :: Request IO
       -&gt; (Status -&gt; ResponseHeaders -&gt; Iteratee Builder IO a)
       -&gt; IO a</codeblock>
  <p id="x31">As we mentioned before, we'll use withManager to get the manager, so our function will start
   off as:</p>
  <codeblock id="x32">inside req f = withManager $ \manager -&gt;</codeblock>
  <p id="x33">And the rest is just playing with the types. We know we want to call http here, and the first
   argument is going to be req. f is almost the right type for the second argument to http, but it
   needs a little help from the blaze function. And the final argument will be manager. This gives
   us:</p>
  <codeblock id="x34">http req (blaze f) manager :: Iteratee Bytestring IO a</codeblock>
  <p id="x35">But we need our function to return IO a. So the last step is to actually run_ the Iteratee to
   produce a value. Our complete definition of inside is:</p>
  <codeblock id="x36">inside req f = withManager $ \manager -&gt;
   run_ (http req (blaze f) manager)</codeblock>
  <p id="x37">Or in point-free style, for those inclined:</p>
  <codeblock id="x38">inside req f = withManager $ run_ . http req (blaze f)</codeblock></conbody></concept>