<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="virtual-hosts"><title>Virtual Hosts</title><conbody>  <p id="x1">Often times, we'll want to run multiple sites from a single machine, using <xref id="x2" href="http://en.wikipedia.org/wiki/Virtual_hosting" format="html" scope="external">virtual
    hosts</xref>. The recommended approach in general is to use a web server like Nginx to be the
   frontend server, and to reverse HTTP proxy to your individual sites. However, it's entirely
   possible to do this in 100% pure Haskell, with just a single instance running for all your
   sites.</p>
  <p id="x3">To achieve this, we'll use the vhost middleware. We'll start off with some boilerplate
   definitions of three Yesod sites:</p>
  <codeblock id="x4">{-# LANGUAGE OverloadedStrings, QuasiQuotes, TemplateHaskell #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}

import Yesod
import Network.Wai.Middleware.Vhost
import Network.Wai.Handler.Warp
import Network.Wai

data Site1 = Site1
data Site2 = Site2
data DefaultSite = DefaultSite

mkYesod "Site1" [parseRoutes|/ Root1 GET|]
getRoot1 = return $ RepPlain "Root1"

mkYesod "Site2" [parseRoutes|/ Root2 GET|]
getRoot2 = return $ RepPlain "Root2"

mkYesod "DefaultSite" [parseRoutes|/ RootDef GET|]
getRootDef = return $ RepPlain "RootDef"

instance Yesod Site1 where approot _ = ""
instance Yesod Site2 where approot _ = ""
instance Yesod DefaultSite where approot _ = ""</codeblock>
  <p id="x5">Now comes the actual virtual hosting. We want to serve Site1 from "host1", Site2 from "host2",
   and otherwise serve DefaultSite. In order to determine which site to use, we'll compare against
   the serverName record of the WAI request value. The code is very straight-forward:</p>
  <codeblock id="x6">main = do
   app1 &lt;- toWaiApp Site1
   app2 &lt;- toWaiApp Site2
   appDef &lt;- toWaiApp DefaultSite
   run 3000 $ vhost
       [ ((==) "host1" . serverName, app1)
       , ((==) "host2" . serverName, app2)
       ] appDef</codeblock>
  <p id="x7">The vhost function takes two arguments: a list of pairs of predicates and applications, and a
   final default application. This approach works very well for just a few sites, but if you have
   dozens of virtual hosts, it would be more efficient to use a Map. Add the following to your
   import list:</p>
  <codeblock id="x8">import qualified Data.Map as Map</codeblock>
  <p id="x9">And then replace your main with:</p>
  <codeblock id="x10">main = do
   app1 &lt;- toWaiApp Site1
   app2 &lt;- toWaiApp Site2
   appDef &lt;- toWaiApp DefaultSite
   let sites = Map.fromList
                   [ ("host1", app1)
                   , ("host2", app2)
                   ]
   run 3000 $ \req -&gt;
       case Map.lookup (serverName req) sites of
           Nothing -&gt; appDef req
           Just app -&gt; app req</codeblock></conbody></concept>