<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="modifying-an-executable"><title>Modifying an Executable</title><conbody>
  <p id="x1">Here's the last curveball in this project. We're going to need to generate these all-in-one
   executables on a number of different systems, many of which won't have Haskell compilers set up.
   Also, it would be very convenient to be able to produce executables for Windows, Linux and Mac on
   a single system, instead of needing a compiler farm for each new web help we want to deploy.</p>
  <p id="x2">Yitz Gale (my coworker at Suite Solutions) came up with an idea: let's embed some dummy content
   with a recognizable pattern in the executable. Then, we'll have another program that comes along
   and swaps out the dummy data with the real stuff. Downside: we need to pre-define the maximum
   size of the webhelp. But we can mitigate this disadvantage by generating executables of various
   sizes, and then using the smallest executable that will hold our data.</p>
  <p id="x3">And this is why we need to go with StringPrimL. Besides the much quicker compile time, if we
   used StringL then GHC would attempt to decode the data for us. Now, we can embed whatever
   arbitrary binary content we want in our executable. GHC will give us an Addr# to the raw bytes,
   and we can access it directly. Apply some binary pickling scheme, such as the
    <apiname id="x4">cereal</apiname> package, and we're in business.</p>
  <p id="x5">The final result, using some not-yet-released versions of the packages described in this post,
   are two files: the template code and the injector:</p>
  <codeblock id="x6">-- Template
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE OverloadedStrings #-}
import Data.FileEmbed
import Data.Serialize (decode)
import Network.Wai.Handler.Launch (run)
import Network.Wai.Application.Static

main = do
    let bs = $(dummySpace 1000000)
    let files = either error id $ decode bs
    run $ staticApp (defaultStaticSettings NoCache)
        { ssFolder = embeddedLookup $ toEmbedded files
        , ssDirListing = StaticDirListing (Just defaultListing) ["index.html", "index.htm"]
        }</codeblock>
  <codeblock id="x7">-- Injector
import Data.FileEmbed
import Data.Serialize
import qualified Data.ByteString.Char8 as S
import qualified Data.ByteString.Lazy as L
import System.Environment (getArgs)
import Codec.Compression.Zlib (compress)

main = do
    args &lt;- getArgs
    (webhelpTemp, srcDir, dstExe) &lt;-
        case args of
            [a, b, c] -&gt; return (a, b, c)
            _ -&gt; error "Usage: webhelp-inject &lt;webhelp-template.exe&gt; &lt;source dir&gt; &lt;output exe&gt;"
    folder &lt;- getDir srcDir
    injectFile (encode folder) webhelpTemp dstExe</codeblock>
 </conbody></concept>