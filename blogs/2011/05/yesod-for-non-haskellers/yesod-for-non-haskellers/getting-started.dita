<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="getting-started"><title>Getting Started</title><conbody>  <note id="x1">We already have a full Haskell/Yesod environment set up on our system, so I don't cover that
   here. For more information, see the <xref id="x2" href="http://www.yesodweb.com/page/five-minutes" format="html" scope="external">Yesod in Five Minutes</xref> page.</note>
  <p id="x3">The first step is using the yesod executable to generate a scaffolded site. The scaffolded site
   is a "template" site and sets up the file/folder structure in the preferred way. A few other
   optimizations like static file serving. It gives you a site that supports databases and logins.
   Start with <codeph id="x4">yesod init</codeph>.</p>
  <p id="x5">Some of these questions (like name) are for the cabal file. Other questions (database) actually
   change the scaffolded site.</p>
  <p id="x6">The "Foundation" is the central datatype of a Yesod application. It's used for a few different
   things:</p>
  <ul id="ul_1b2fdc73-f77e-4bcb-b40d-780ab953c20d">
   <li id="x7">It can contain information that needs to be loaded at the start of your application and used
    throughout. For example, database connection.</li>
   <li id="x8">A central concept in Yesod is a URL datatype. This datatype is related to your foundation via
    a type family, aka associated types.</li>
  </ul>
  <note id="x9">A datatype in Haskell has one or more constructors. Each constructor has zero or more fields
   that contain data. In this case, the foundation will always have one constructor. We'll see more
   about datatypes later.</note>
  <p id="x10">The foundation is often times the same as the project name, starting with a capital letter.</p>
  <p id="x11">Once you have your folder, you want to build it. Run <codeph id="x12">cabal configure</codeph> and
    <codeph id="x13">yesod build</codeph>. We use "yesod build" instead of "cabal build" because it does
   dependency checking for us on template files. You should now have an executable named
   "dist/build/&lt;your app&gt;/&lt;your app&gt;". Go ahead and run it.</p>
  <p id="x14">If you used PostgreSQL, you'll get an error about not having an account. We need to create it.
   To see how it's trying to log in, look in config/Settings.hs. A few notes:<ul id="ul_20e843e4-dee0-425c-ae89-0f18a097e283">
    <li id="x15">Top of file defines language extensions.</li>
    <li id="x16">Haskell project is broken up into modules. The "module Settings (...) where" line defines
     the "export list", what the module provides to the outside world.</li>
    <li id="x17">Then the import statements pull code in to be used here. "qualified" means don't import all
     the content of the module into the current namespace. "as H" gives a shortcut as you can type
     "Text.Hamlet.renderHtml" as "H.renderHtml".</li>
    <li id="x18">Note that there's a difference between things starting with uppercase and lowercase. The
     former is data types and constructors. The latter is functions and variables.</li>
    <li id="x19">#ifdef PRODUCTION allows us to use the same codebase for testing and production and just
     change a few settings.</li>
   </ul></p>
  <p id="x20">connStr contains our database information. We need to create a user and database in
   PostgreSQL.</p>
  <codeblock id="x21">sudo -u postgres psql
&gt; CREATE USER recipes password 'recipes';
&gt; CREATE DATABASE recipes_debug OWNER recipes;
&gt; \q</codeblock>
  <p id="x22">Now try running your app again. It should automatically create the necessary tables. Open up
   the app in your browser: http://localhost:3000/. You should see a "Hello" and "Added from
   JavaScript".</p>
 </conbody></concept>